{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","type","value","onChange","change","placeholder","Result","weather","error","city","date","sunrise","sunset","temperature","pressure","wind","content","currentSunrise","Date","toLocaleTimeString","currentSunset","console","log","className","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","toLocaleString","sys","main","temp","speed","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAgBeA,EAbF,SAACC,GACV,OACI,8BACI,2BAAOC,KAAK,OAAOC,MAAOF,EAAME,MAAOC,SAAUH,EAAMI,OAAQC,YAAY,iBCwCxEC,EA3CA,SAACN,GAAW,IAAD,EAEsDA,EAAMO,QAA1EC,EAFc,EAEdA,MAAOC,EAFO,EAEPA,KAAMC,EAFC,EAEDA,KAAMC,EAFL,EAEKA,QAASC,EAFd,EAEcA,OAAQC,EAFtB,EAEsBA,YAAaC,EAFnC,EAEmCA,SAAUC,EAF7C,EAE6CA,KAE/DC,EAAU,KAEd,IAAKR,GAASC,EAAM,CAGhB,IAAMQ,EAAiB,IAAIC,KAAe,IAAVP,GAAgBQ,qBAC1CC,EAAgB,IAAIF,KAAc,IAATN,GAAeO,qBAK9CE,QAAQC,IAAIL,GAEZD,EACI,6BACI,kDAAuB,4BAAKP,IAC5B,6CAAkB,4BAAKC,IACvB,oDAAyB,4BAAKG,EAAL,UACzB,wCAAa,4BAAKI,IAClB,uCAAY,4BAAKG,IACjB,yCAAc,4BAAKN,EAAL,QAAd,KACA,qCAAU,4BAAKC,EAAL,UAMtB,OACI,yBAAKQ,UAAU,UACVf,EAAK,gCAA4BC,GAASO,ICwDxCQ,G,iNApFbC,MAAQ,CACNvB,MAAO,GACPQ,KAAM,GACND,KAAM,GACNE,QAAS,GACTC,OAAQ,GACRC,YAAa,GACbC,SAAU,GACVC,KAAM,GACNP,OAAO,G,EAITkB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZ1B,MAAOyB,EAAEE,OAAO3B,S,kFAMD4B,EAAWC,GAAY,IAAD,OAIvC,GAAgC,IAA5BC,KAAKP,MAAMvB,MAAM+B,QACjBF,EAAU7B,QAAU8B,KAAKP,MAAMvB,MAAO,CAGxC,IAAMgC,EAAG,2DAAuDF,KAAKP,MAAMvB,MAAlE,kBAhCH,mCAgCG,iBAKTiC,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,aAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJpB,QAAQC,IAAImB,GACZ,IAAM/B,GAAO,IAAIQ,MAAOwB,iBACxB,EAAKd,UAAS,SAAAH,GAAK,MAAK,CACtBjB,OAAO,EACPE,KAAMA,EACND,KAAMgB,EAAMvB,MACZS,QAAS8B,EAAKE,IAAIhC,QAClBC,OAAQ6B,EAAKE,IAAI/B,OACjBC,YAAa4B,EAAKG,KAAKC,KACvB/B,SAAU2B,EAAKG,KAAK9B,SACpBC,KAAM0B,EAAK1B,KAAK+B,aAInBC,OAAM,SAAAC,GACL,EAAKpB,UAAS,SAAAH,GAAK,MAAK,CACtBjB,OAAO,EACPC,KAAM,EAAKgB,MAAMvB,gB,+BAUzB,OACE,yBAAKqB,UAAU,OACb,kBAAC,EAAD,CAAMrB,MAAO8B,KAAKP,MAAMvB,MAAOE,OAAQ4B,KAAKN,oBAC5C,kBAAC,EAAD,CAAQnB,QAASyB,KAAKP,a,GA1EZwB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.20509c58.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Form = (props) => {\n    return (\n        <form>\n            <input type=\"text\" value={props.value} onChange={props.change} placeholder=\"Enter city\" />\n            {/* <button>Search Cities</button> */}\n        </form>\n    )\n\n\n\n}\n\n\nexport default Form","import React from 'react'\n\n\nconst Result = (props) => {\n\n    const { error, city, date, sunrise, sunset, temperature, pressure, wind } = props.weather\n\n    let content = null;\n\n    if (!error && city) {\n\n\n        const currentSunrise = new Date(sunrise * 1000).toLocaleTimeString()\n        const currentSunset = new Date(sunset * 1000).toLocaleTimeString()\n\n\n\n\n        console.log(currentSunrise)\n\n        content = (\n            <div>\n                <h3>Search Results For <em>{city}</em></h3>\n                <h4>Day and Time: <em>{date}</em></h4>\n                <h4>Current Temperature: <em>{temperature}&#176;C</em></h4>\n                <h4>Sunrise: <em>{currentSunrise}</em></h4>\n                <h4>Sunset: <em>{currentSunset}</em></h4>\n                <h4>Pressure: <em>{pressure} hPa</em> </h4>\n                <h4>Wind: <em>{wind} m/h</em></h4>\n\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"result\">\n            {error ? `We don't have in base ${city}` : content}\n        </div>\n\n    )\n\n\n\n}\n\n\nexport default Result","import React, { Component } from 'react';\nimport Form from './Form'\nimport Result from './Result'\nimport './App.css';\n\nconst key = '7a5945e7fb9a0d2614568d21c24eba7a'\n\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temperature: '',\n    pressure: '',\n    wind: '',\n    error: false\n\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n\n    })\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n\n\n\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n\n\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${key}&units=metric`\n\n\n\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Failed\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          const date = new Date().toLocaleString();\n          this.setState(state => ({\n            error: false,\n            date: date,\n            city: state.value,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temperature: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed\n\n          }))\n        })\n        .catch(err => {\n          this.setState(state => ({\n            error: true,\n            city: this.state.value\n          }))\n        })\n    }\n\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form value={this.state.value} change={this.handleInputChange} />\n        <Result weather={this.state} />\n      </div>\n\n\n\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}